kind: ConfigMap
apiVersion: v1
metadata:
  name: avgtransactions
data:
  avgtransactions.py: |
    # Importing necessary libraries and modules
    import sys, string
    import os
    import socket
    import time
    import operator
    import boto3
    import json
    from pyspark.sql import SparkSession
    from datetime import datetime
    
    # Main function
    if __name__ == "__main__":
        # Create a SparkSession
        spark = SparkSession.builder.appName("Ethereum").getOrCreate()
        
        # Define a function to check if the transaction is valid or not
        def good_lines(line):
            try:
                # Splitting the transaction line by comma and checking if all the fields are present
                fields = line.split(',')
                if len(fields) != 15:
                    return False
                # Checking if the value and block number fields are numeric
                float(fields[7])
                int(fields[11])
                return True
            except:
                return False
        
        # Get the data repository bucket name from environment variables
        s3_data_repository_bucket = os.environ['DATA_REPOSITORY_BUCKET']
        
        # Get the S3 endpoint URL, access key ID, secret access key and bucket name from environment variables
        s3_endpoint_url = os.environ['S3_ENDPOINT_URL'] + ':' + os.environ['BUCKET_PORT']
        s3_access_key_id = os.environ['AWS_ACCESS_KEY_ID']
        s3_secret_access_key = os.environ['AWS_SECRET_ACCESS_KEY']
        s3_bucket = os.environ['BUCKET_NAME']
        
        # Set the S3 endpoint URL, access key ID and secret access key for Hadoop configuration
        hadoopConf = spark.sparkContext._jsc.hadoopConfiguration()
        hadoopConf.set("fs.s3a.endpoint", s3_endpoint_url)
        hadoopConf.set("fs.s3a.access.key", s3_access_key_id)
        hadoopConf.set("fs.s3a.secret.key", s3_secret_access_key)
        hadoopConf.set("fs.s3a.path.style.access", "true")
        hadoopConf.set("fs.s3a.connection.ssl.enabled", "false")
        
        # Read the transactions.csv file from S3 and filter out invalid transactions
        transactions = spark.sparkContext.textFile("s3a://" + s3_data_repository_bucket + "/ECS765/ethereum-parvulus/transactions.csv")
        clean_lines = transactions.filter(good_lines)
        
        # Calculate the average value of transactions per month and format the output
        avg_transactions = clean_lines.map(lambda line: line.split(',')) \
                             .map(lambda fields: (time.strftime("%m/%Y", time.gmtime(int(fields[11]))),(float(fields[7]), 1))) \
                                       .reduceByKey(lambda x, y: (x[0] + y[0], x[1] + y[1])) \
                                       .map(lambda a: (a[0], str(a[1][0] / a[1][1]))) \
                                       .map(lambda op: ','.join(str(tr) for tr in op))
        
        # Create a S3 bucket resource object
        my_bucket_resource = boto3.resource('s3',
                                            endpoint_url='http://' + s3_endpoint_url,
                                            aws_access_key_id=s3_access_key_id,
                                            aws_secret_access_key=s3_secret_access_key)
        
        # Get the current date and time
        now = datetime.now()
        date_time = now.strftime("%d-%m-%Y_%H:%M:%S")
        
        # Create an S3 object and upload the output
        my_result_object = my_bucket_resource.Object(s3_bucket, 'ethereum_avg' + date_time + '/transactions_avg.txt')
        my_result_object.put(Body=json.dumps(avg_transactions.take(100)))
        
        # Stop the spark job
        print(avg_transactions.take(100))
        
        spark.stop()
        
