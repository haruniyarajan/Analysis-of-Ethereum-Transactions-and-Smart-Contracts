kind: ConfigMap
apiVersion: v1
metadata:
  name: topminers
data:
  topminers.py: |
    import os
    import boto3
    import json
    from pyspark.sql import SparkSession
    from datetime import datetime
    
    
    def good_lines(line):
        """
        Check if the line is valid and contains 19 fields.
        """
        try:
            fields = line.split(',')
            if len(fields) == 19 and fields[1] != 'hash':
                return True
            else:
                return False
        except:
            return False
    
    
    def feature_extraction(line):
        """
        Extract miner and block size from a valid line.
        """
        try:
            fields = line.split(',')
            miner = str(fields[9])
            size = int(fields[12])
            return (miner, size)
        except:
            return (None, 0)
    
    
    if __name__ == "__main__":
        # Create a Spark session
        spark = SparkSession.builder.appName("Ethereum").getOrCreate()
    
        # Configure AWS S3 access
        s3_data_repository_bucket = os.environ['DATA_REPOSITORY_BUCKET']
        s3_endpoint_url = os.environ['S3_ENDPOINT_URL'] + ':' + os.environ['BUCKET_PORT']
        s3_access_key_id = os.environ['AWS_ACCESS_KEY_ID']
        s3_secret_access_key = os.environ['AWS_SECRET_ACCESS_KEY']
        s3_bucket_name = os.environ['BUCKET_NAME']
        
        hadoopConf = spark.sparkContext._jsc.hadoopConfiguration()
        hadoopConf.set("fs.s3a.endpoint", s3_endpoint_url)
        hadoopConf.set("fs.s3a.access.key", s3_access_key_id)
        hadoopConf.set("fs.s3a.secret.key", s3_secret_access_key)
        hadoopConf.set("fs.s3a.path.style.access", "true")
        hadoopConf.set("fs.s3a.connection.ssl.enabled", "false")  
        
        # Read the Ethereum blocks data from S3
        blocks = spark.sparkContext.textFile("s3a://{}/ECS765/ethereum-parvulus/blocks.csv".format(s3_data_repository_bucket))
        
        # Filter out invalid lines and extract miner and block size
        clean_lines = blocks.filter(good_lines)
        features = clean_lines.map(feature_extraction)
        
        # Reduce by key to get total block size per miner and take the top 10
        top_miners = features.reduceByKey(lambda a, b: a + b).takeOrdered(10, key=lambda x: -x[1])
        
        # Upload the results to S3
        s3 = boto3.client('s3', endpoint_url='http://' + s3_endpoint_url,
                          aws_access_key_id=s3_access_key_id,
                          aws_secret_access_key=s3_secret_access_key)
        
        now = datetime.now() # current date and time
        date_time = now.strftime("%d-%m-%Y_%H:%M:%S")
        result_key = 'ethereum_top_miners{}/top_miners.txt'.format(date_time)
        
        s3.put_object(Bucket=s3_bucket_name, Key=result_key, Body=json.dumps(top_miners))
        
        # Stop the Spark session
        spark.stop()
